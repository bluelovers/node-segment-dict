"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const debug_color2_1 = require("debug-color2");
const fs = require("fs-extra");
const path = require("upath2");
const line_1 = require("../lib/loader/line");
const project_config_1 = require("../project.config");
const util_1 = require("./util");
const naturalCompare = require("string-natural-compare");
let CWD = path.join(project_config_1.default.dict_root, 'segment');
let USE_CJK_MODE = 2;
let CACHE_LIST = {
    skip: [],
};
util_1.globDict(CWD, [
    'dict_synonym/*.txt',
    'names/*.txt',
    'lazy/badword.txt',
    'lazy/index.txt',
    //'dict*.txt',
    'phrases/*.txt',
    'pangu/*.txt',
])
    .tap(function (ls) {
    let a = ls.reduce(function (a, v) {
        let p = path.relative(CWD, v);
        a.push(p);
        return a;
    }, []);
    debug_color2_1.console.debug(a);
    //process.exit();
})
    .mapSeries(async function (file) {
    let _basepath = path.relative(CWD, file);
    debug_color2_1.console.debug(`[START]`, _basepath);
    debug_color2_1.console.time(_basepath);
    let list = await util_1.loadDictFile(file, function (list, cur) {
        cur.file = file;
        let [w, p, f] = cur.data;
        let cjk_id = util_1.getCjkName(w, USE_CJK_MODE);
        cur.cjk_id = cjk_id;
        cur.line_type = util_1.chkLineType(cur.line);
        if (cur.line_type == util_1.EnumLineType.COMMENT) {
            CACHE_LIST.skip.push(cur);
            return false;
        }
        return true;
    });
    list = SortList(list);
    let out_list = list.map(v => v.line);
    //console.log(list);
    let out_file = file;
    if (0) {
        out_file = path.join(project_config_1.default.temp_root, path.basename(_basepath));
    }
    let out_data = line_1.serialize(out_list) + "\n\n";
    await fs.outputFile(out_file, out_data);
    debug_color2_1.console.timeEnd(_basepath);
})
    .tap(async function () {
    if (CACHE_LIST.skip.length) {
        let list = SortList(CACHE_LIST.skip);
        let out_list = list.map(v => v.line);
        let out_file = path.join(project_config_1.default.temp_root, 'skip2.txt');
        await fs.appendFile(out_file, "\n\n" + line_1.serialize(out_list) + "\n\n");
    }
});
function SortList(ls) {
    // @ts-ignore
    return ls.sort(function (a, b) {
        if (a.line_type == util_1.EnumLineType.COMMENT_TAG
            || b.line_type == util_1.EnumLineType.COMMENT_TAG) {
            return (a.index - b.index);
        }
        let ret = naturalCompare.caseInsensitive(a.cjk_id, b.cjk_id)
            || (a.index - b.index)
            || 0;
        return ret;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydC5kaWN0X3N5bm9ueW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzb3J0LmRpY3Rfc3lub255bS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQUF1QztBQUN2QywrQkFBK0I7QUFDL0IsK0JBQStCO0FBQy9CLDZDQUErQztBQUMvQyxzREFBOEM7QUFFOUMsaUNBQTBHO0FBQzFHLHlEQUEwRDtBQUUxRCxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLHdCQUFhLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBRXhELElBQUksWUFBWSxHQUFHLENBQUMsQ0FBQztBQUVyQixJQUFJLFVBQVUsR0FBRztJQUNoQixJQUFJLEVBQUUsRUFBeUI7Q0FDL0IsQ0FBQztBQUVGLGVBQVEsQ0FBQyxHQUFHLEVBQUU7SUFDYixvQkFBb0I7SUFDcEIsYUFBYTtJQUNiLGtCQUFrQjtJQUNsQixnQkFBZ0I7SUFDaEIsY0FBYztJQUNkLGVBQWU7SUFDZixhQUFhO0NBQ2IsQ0FBQztLQUNBLEdBQUcsQ0FBQyxVQUFVLEVBQVk7SUFFMUIsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO1FBRS9CLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRTlCLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFVixPQUFPLENBQUMsQ0FBQztJQUNWLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUVQLHNCQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRWpCLGlCQUFpQjtBQUNsQixDQUFDLENBQUM7S0FDRCxTQUFTLENBQUMsS0FBSyxXQUFXLElBQUk7SUFFOUIsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFekMsc0JBQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBRXBDLHNCQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRXhCLElBQUksSUFBSSxHQUFHLE1BQU0sbUJBQVksQ0FBb0IsSUFBSSxFQUFFLFVBQVUsSUFBSSxFQUFFLEdBQUc7UUFFekUsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFFaEIsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztRQUV6QixJQUFJLE1BQU0sR0FBRyxpQkFBVSxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUV6QyxHQUFHLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNwQixHQUFHLENBQUMsU0FBUyxHQUFHLGtCQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXRDLElBQUksR0FBRyxDQUFDLFNBQVMsSUFBSSxtQkFBWSxDQUFDLE9BQU8sRUFDekM7WUFDQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUUxQixPQUFPLEtBQUssQ0FBQztTQUNiO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksR0FBRyxRQUFRLENBQUUsSUFBSSxDQUFDLENBQUM7SUFFdkIsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVyQyxvQkFBb0I7SUFFcEIsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBRXBCLElBQUksQ0FBQyxFQUNMO1FBQ0MsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQWEsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0tBQ3hFO0lBRUQsSUFBSSxRQUFRLEdBQUcsZ0JBQVMsQ0FBQyxRQUFRLENBQUMsR0FBRyxNQUFNLENBQUM7SUFFNUMsTUFBTSxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUV4QyxzQkFBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUM1QixDQUFDLENBQUM7S0FDRCxHQUFHLENBQUMsS0FBSztJQUVULElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQzFCO1FBQ0MsSUFBSSxJQUFJLEdBQUcsUUFBUSxDQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0QyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXJDLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQWEsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFFL0QsTUFBTSxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxNQUFNLEdBQUcsZ0JBQVMsQ0FBQyxRQUFRLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQztLQUNyRTtBQUNGLENBQUMsQ0FBQyxDQUNGO0FBRUQsU0FBUyxRQUFRLENBQXdCLEVBQU87SUFFL0MsYUFBYTtJQUNiLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQW9CLEVBQUUsQ0FBb0I7UUFFbEUsSUFDQyxDQUFDLENBQUMsU0FBUyxJQUFJLG1CQUFZLENBQUMsV0FBVztlQUNwQyxDQUFDLENBQUMsU0FBUyxJQUFJLG1CQUFZLENBQUMsV0FBVyxFQUUzQztZQUNDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMzQjtRQUVELElBQUksR0FBRyxHQUFHLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDO2VBQ3hELENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO2VBQ25CLENBQUMsQ0FDSjtRQUVELE9BQU8sR0FBRyxDQUFDO0lBQ1osQ0FBQyxDQUFDLENBQUE7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29uc29sZSB9IGZyb20gXCJkZWJ1Zy1jb2xvcjJcIjtcbmltcG9ydCAqIGFzIGZzIGZyb20gXCJmcy1leHRyYVwiO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwidXBhdGgyXCI7XG5pbXBvcnQgeyBzZXJpYWxpemUgfSBmcm9tICcuLi9saWIvbG9hZGVyL2xpbmUnO1xuaW1wb3J0IFByb2plY3RDb25maWcgZnJvbSBcIi4uL3Byb2plY3QuY29uZmlnXCI7XG5cbmltcG9ydCB7IGNoa0xpbmVUeXBlLCBFbnVtTGluZVR5cGUsIGdldENqa05hbWUsIGdsb2JEaWN0LCBJTG9hZERpY3RGaWxlUm93MiwgbG9hZERpY3RGaWxlIH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCBuYXR1cmFsQ29tcGFyZSA9IHJlcXVpcmUoJ3N0cmluZy1uYXR1cmFsLWNvbXBhcmUnKTtcblxubGV0IENXRCA9IHBhdGguam9pbihQcm9qZWN0Q29uZmlnLmRpY3Rfcm9vdCwgJ3NlZ21lbnQnKTtcblxubGV0IFVTRV9DSktfTU9ERSA9IDI7XG5cbmxldCBDQUNIRV9MSVNUID0ge1xuXHRza2lwOiBbXSBhcyBJTG9hZERpY3RGaWxlUm93MltdLFxufTtcblxuZ2xvYkRpY3QoQ1dELCBbXG5cdCdkaWN0X3N5bm9ueW0vKi50eHQnLFxuXHQnbmFtZXMvKi50eHQnLFxuXHQnbGF6eS9iYWR3b3JkLnR4dCcsXG5cdCdsYXp5L2luZGV4LnR4dCcsXG5cdC8vJ2RpY3QqLnR4dCcsXG5cdCdwaHJhc2VzLyoudHh0Jyxcblx0J3Bhbmd1LyoudHh0Jyxcbl0pXG5cdC50YXAoZnVuY3Rpb24gKGxzOiBzdHJpbmdbXSlcblx0e1xuXHRcdGxldCBhID0gbHMucmVkdWNlKGZ1bmN0aW9uIChhLCB2KVxuXHRcdHtcblx0XHRcdGxldCBwID0gcGF0aC5yZWxhdGl2ZShDV0QsIHYpO1xuXG5cdFx0XHRhLnB1c2gocCk7XG5cblx0XHRcdHJldHVybiBhO1xuXHRcdH0sIFtdKTtcblxuXHRcdGNvbnNvbGUuZGVidWcoYSk7XG5cblx0XHQvL3Byb2Nlc3MuZXhpdCgpO1xuXHR9KVxuXHQubWFwU2VyaWVzKGFzeW5jIGZ1bmN0aW9uIChmaWxlKVxuXHR7XG5cdFx0bGV0IF9iYXNlcGF0aCA9IHBhdGgucmVsYXRpdmUoQ1dELCBmaWxlKTtcblxuXHRcdGNvbnNvbGUuZGVidWcoYFtTVEFSVF1gLCBfYmFzZXBhdGgpO1xuXG5cdFx0Y29uc29sZS50aW1lKF9iYXNlcGF0aCk7XG5cblx0XHRsZXQgbGlzdCA9IGF3YWl0IGxvYWREaWN0RmlsZTxJTG9hZERpY3RGaWxlUm93Mj4oZmlsZSwgZnVuY3Rpb24gKGxpc3QsIGN1cilcblx0XHR7XG5cdFx0XHRjdXIuZmlsZSA9IGZpbGU7XG5cblx0XHRcdGxldCBbdywgcCwgZl0gPSBjdXIuZGF0YTtcblxuXHRcdFx0bGV0IGNqa19pZCA9IGdldENqa05hbWUodywgVVNFX0NKS19NT0RFKTtcblxuXHRcdFx0Y3VyLmNqa19pZCA9IGNqa19pZDtcblx0XHRcdGN1ci5saW5lX3R5cGUgPSBjaGtMaW5lVHlwZShjdXIubGluZSk7XG5cblx0XHRcdGlmIChjdXIubGluZV90eXBlID09IEVudW1MaW5lVHlwZS5DT01NRU5UKVxuXHRcdFx0e1xuXHRcdFx0XHRDQUNIRV9MSVNULnNraXAucHVzaChjdXIpO1xuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSk7XG5cblx0XHRsaXN0ID0gU29ydExpc3QoIGxpc3QpO1xuXG5cdFx0bGV0IG91dF9saXN0ID0gbGlzdC5tYXAodiA9PiB2LmxpbmUpO1xuXG5cdFx0Ly9jb25zb2xlLmxvZyhsaXN0KTtcblxuXHRcdGxldCBvdXRfZmlsZSA9IGZpbGU7XG5cblx0XHRpZiAoMClcblx0XHR7XG5cdFx0XHRvdXRfZmlsZSA9IHBhdGguam9pbihQcm9qZWN0Q29uZmlnLnRlbXBfcm9vdCwgcGF0aC5iYXNlbmFtZShfYmFzZXBhdGgpKTtcblx0XHR9XG5cblx0XHRsZXQgb3V0X2RhdGEgPSBzZXJpYWxpemUob3V0X2xpc3QpICsgXCJcXG5cXG5cIjtcblxuXHRcdGF3YWl0IGZzLm91dHB1dEZpbGUob3V0X2ZpbGUsIG91dF9kYXRhKTtcblxuXHRcdGNvbnNvbGUudGltZUVuZChfYmFzZXBhdGgpO1xuXHR9KVxuXHQudGFwKGFzeW5jIGZ1bmN0aW9uICgpXG5cdHtcblx0XHRpZiAoQ0FDSEVfTElTVC5za2lwLmxlbmd0aClcblx0XHR7XG5cdFx0XHRsZXQgbGlzdCA9IFNvcnRMaXN0KCBDQUNIRV9MSVNULnNraXApO1xuXHRcdFx0bGV0IG91dF9saXN0ID0gbGlzdC5tYXAodiA9PiB2LmxpbmUpO1xuXG5cdFx0XHRsZXQgb3V0X2ZpbGUgPSBwYXRoLmpvaW4oUHJvamVjdENvbmZpZy50ZW1wX3Jvb3QsICdza2lwMi50eHQnKTtcblxuXHRcdFx0YXdhaXQgZnMuYXBwZW5kRmlsZShvdXRfZmlsZSwgXCJcXG5cXG5cIiArIHNlcmlhbGl6ZShvdXRfbGlzdCkgKyBcIlxcblxcblwiKTtcblx0XHR9XG5cdH0pXG47XG5cbmZ1bmN0aW9uIFNvcnRMaXN0PFQgPSBJTG9hZERpY3RGaWxlUm93Mj4obHM6IFRbXSlcbntcblx0Ly8gQHRzLWlnbm9yZVxuXHRyZXR1cm4gbHMuc29ydChmdW5jdGlvbiAoYTogSUxvYWREaWN0RmlsZVJvdzIsIGI6IElMb2FkRGljdEZpbGVSb3cyKVxuXHR7XG5cdFx0aWYgKFxuXHRcdFx0YS5saW5lX3R5cGUgPT0gRW51bUxpbmVUeXBlLkNPTU1FTlRfVEFHXG5cdFx0XHR8fCBiLmxpbmVfdHlwZSA9PSBFbnVtTGluZVR5cGUuQ09NTUVOVF9UQUdcblx0XHQpXG5cdFx0e1xuXHRcdFx0cmV0dXJuIChhLmluZGV4IC0gYi5pbmRleCk7XG5cdFx0fVxuXG5cdFx0bGV0IHJldCA9IG5hdHVyYWxDb21wYXJlLmNhc2VJbnNlbnNpdGl2ZShhLmNqa19pZCwgYi5jamtfaWQpXG5cdFx0XHR8fCAoYS5pbmRleCAtIGIuaW5kZXgpXG5cdFx0XHR8fCAwXG5cdFx0O1xuXG5cdFx0cmV0dXJuIHJldDtcblx0fSlcbn1cbiJdfQ==