"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const table_1 = require("cjk-conv/lib/zh/table");
const list_1 = require("cjk-conv/lib/zh/table/list");
const fast_glob_1 = require("fast-glob");
const BluebirdPromise = require("bluebird");
const line_1 = require("../lib/loader/line");
const index_1 = require("../lib/loader/segment/index");
const naturalCompare = require("string-natural-compare");
exports.DEFAULT_IGNORE = [
    'char*',
    '**/skip',
    '**/jieba',
    '**/lazy',
    '**/synonym',
    '**/names',
];
function globDict(cwd, pattern, ignore = exports.DEFAULT_IGNORE) {
    return BluebirdPromise
        .resolve(fast_glob_1.default(pattern, {
        cwd,
        absolute: true,
        ignore,
        markDirectories: true,
    }));
}
exports.globDict = globDict;
function loadDictFile(file, fn, options) {
    options = options || {};
    const parseFn = options.parseFn = options.parseFn || index_1.parseLine;
    return line_1.default(file)
        .then(function (b) {
        return b.reduce(function (a, line, index, arr) {
            let bool;
            let data = parseFn(line);
            let cur = {
                data,
                line,
                index,
            };
            if (fn) {
                // @ts-ignore
                bool = fn(a, cur);
            }
            else {
                bool = true;
            }
            if (bool) {
                a.push(cur);
            }
            return a;
        }, []);
    });
}
exports.loadDictFile = loadDictFile;
var EnumLineType;
(function (EnumLineType) {
    EnumLineType[EnumLineType["BASE"] = 0] = "BASE";
    EnumLineType[EnumLineType["COMMENT"] = 1] = "COMMENT";
    EnumLineType[EnumLineType["COMMENT_TAG"] = 2] = "COMMENT_TAG";
})(EnumLineType = exports.EnumLineType || (exports.EnumLineType = {}));
function chkLineType(line) {
    let ret = EnumLineType.BASE;
    if (line.indexOf('//') == 0) {
        ret = EnumLineType.COMMENT;
        if (/ @todo/i.test(line)) {
            ret = EnumLineType.COMMENT_TAG;
        }
    }
    return ret;
}
exports.chkLineType = chkLineType;
function baseSortList(ls, bool) {
    return ls.sort(function (a, b) {
        // @ts-ignore
        return naturalCompare.caseInsensitive(a.cjk_id, b.cjk_id)
            // @ts-ignore
            || naturalCompare.caseInsensitive(a.data[1], b.data[1])
            // @ts-ignore
            || naturalCompare.caseInsensitive(a.data[0], b.data[0])
            // @ts-ignore
            || naturalCompare.caseInsensitive(a.data[2], b.data[2]);
    });
}
exports.baseSortList = baseSortList;
function getCjkName(w, USE_CJK_MODE) {
    let cjk_id = w;
    if (USE_CJK_MODE > 1) {
        let cjk_list = list_1.textList(w);
        cjk_list.sort();
        cjk_id = cjk_list[0];
    }
    else if (USE_CJK_MODE) {
        let cjk_list = table_1.default.auto(w);
        cjk_list.sort();
        cjk_id = cjk_list[0];
    }
    return cjk_id;
}
exports.getCjkName = getCjkName;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBNkM7QUFDN0MscURBQXNEO0FBQ3RELHlDQUFpQztBQUNqQyw0Q0FBNkM7QUFDN0MsNkNBQStFO0FBQy9FLHVEQUFxSDtBQUVySCx5REFBMEQ7QUFTN0MsUUFBQSxjQUFjLEdBQUc7SUFDN0IsT0FBTztJQUNQLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFlBQVk7SUFDWixVQUFVO0NBQ1YsQ0FBQztBQUVGLFNBQWdCLFFBQVEsQ0FBQyxHQUFXLEVBQUUsT0FBa0IsRUFBRSxNQUFNLEdBQUcsc0JBQWM7SUFFaEYsT0FBTyxlQUFlO1NBQ3BCLE9BQU8sQ0FBQyxtQkFBUSxDQUFTLE9BQU8sRUFBRTtRQUNsQyxHQUFHO1FBQ0gsUUFBUSxFQUFFLElBQUk7UUFDZCxNQUFNO1FBQ04sZUFBZSxFQUFFLElBQUk7S0FDckIsQ0FBQyxDQUFDLENBQ0Y7QUFDSCxDQUFDO0FBVkQsNEJBVUM7QUFTRCxTQUFnQixZQUFZLENBQXVCLElBQVksRUFDOUQsRUFBbUMsRUFDbkMsT0FFQztJQUdELE9BQU8sR0FBRyxPQUFPLElBQUksRUFBRSxDQUFDO0lBQ3hCLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sSUFBSSxpQkFBZ0IsQ0FBQztJQUV0RSxPQUFPLGNBQUksQ0FBQyxJQUFJLENBQUM7U0FDZixJQUFJLENBQUMsVUFBVSxDQUFDO1FBRWhCLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUc7WUFFNUMsSUFBSSxJQUFhLENBQUM7WUFFbEIsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRXpCLElBQUksR0FBRyxHQUFHO2dCQUNULElBQUk7Z0JBQ0osSUFBSTtnQkFDSixLQUFLO2FBQ0wsQ0FBQztZQUVGLElBQUksRUFBRSxFQUNOO2dCQUNDLGFBQWE7Z0JBQ2IsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUE7YUFDakI7aUJBRUQ7Z0JBQ0MsSUFBSSxHQUFHLElBQUksQ0FBQzthQUNaO1lBRUQsSUFBSSxJQUFJLEVBQ1I7Z0JBQ0MsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNaO1lBRUQsT0FBTyxDQUFDLENBQUM7UUFDVixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDUixDQUFDLENBQUMsQ0FDRDtBQUNILENBQUM7QUE1Q0Qsb0NBNENDO0FBRUQsSUFBWSxZQUtYO0FBTEQsV0FBWSxZQUFZO0lBRXZCLCtDQUFRLENBQUE7SUFDUixxREFBVyxDQUFBO0lBQ1gsNkRBQWUsQ0FBQTtBQUNoQixDQUFDLEVBTFcsWUFBWSxHQUFaLG9CQUFZLEtBQVosb0JBQVksUUFLdkI7QUFFRCxTQUFnQixXQUFXLENBQUMsSUFBWTtJQUV2QyxJQUFJLEdBQUcsR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDO0lBRTVCLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQzNCO1FBQ0MsR0FBRyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUM7UUFFM0IsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUN4QjtZQUNDLEdBQUcsR0FBRyxZQUFZLENBQUMsV0FBVyxDQUFDO1NBQy9CO0tBQ0Q7SUFFRCxPQUFPLEdBQUcsQ0FBQztBQUNaLENBQUM7QUFmRCxrQ0FlQztBQUVELFNBQWdCLFlBQVksQ0FBd0IsRUFBTyxFQUFFLElBQWM7SUFFMUUsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7UUFFNUIsYUFBYTtRQUNiLE9BQU8sY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFDeEQsYUFBYTtlQUNWLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZELGFBQWE7ZUFDVixjQUFjLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2RCxhQUFhO2VBQ1YsY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDdEQ7SUFDSCxDQUFDLENBQUMsQ0FBQztBQUNKLENBQUM7QUFkRCxvQ0FjQztBQUVELFNBQWdCLFVBQVUsQ0FBQyxDQUFTLEVBQUUsWUFBb0I7SUFFekQsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBRWYsSUFBSSxZQUFZLEdBQUcsQ0FBQyxFQUNwQjtRQUNDLElBQUksUUFBUSxHQUFHLGVBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQixRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDaEIsTUFBTSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNyQjtTQUNJLElBQUksWUFBWSxFQUNyQjtRQUNDLElBQUksUUFBUSxHQUFHLGVBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2hCLE1BQU0sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDckI7SUFFRCxPQUFPLE1BQU0sQ0FBQztBQUNmLENBQUM7QUFsQkQsZ0NBa0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxpYlRhYmxlIGZyb20gJ2Nqay1jb252L2xpYi96aC90YWJsZSc7XG5pbXBvcnQgeyB0ZXh0TGlzdCB9IGZyb20gJ2Nqay1jb252L2xpYi96aC90YWJsZS9saXN0JztcbmltcG9ydCBGYXN0R2xvYiBmcm9tICdmYXN0LWdsb2InO1xuaW1wb3J0IEJsdWViaXJkUHJvbWlzZSA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7XG5pbXBvcnQgbG9hZCwgeyBwYXJzZUxpbmUsIHN0cmluZ2lmeUxpbmUsIHNlcmlhbGl6ZSB9IGZyb20gJy4uL2xpYi9sb2FkZXIvbGluZSc7XG5pbXBvcnQgeyBJRGljdFJvdywgcGFyc2VMaW5lIGFzIHBhcnNlTGluZVNlZ21lbnQsIHNlcmlhbGl6ZSBhcyBzZXJpYWxpemVTZWdtZW50IH0gZnJvbSAnLi4vbGliL2xvYWRlci9zZWdtZW50L2luZGV4JztcbmltcG9ydCB7IElDVVJfV09SRCB9IGZyb20gJy4uL3Rlc3Qvc29ydCc7XG5pbXBvcnQgbmF0dXJhbENvbXBhcmUgPSByZXF1aXJlKCdzdHJpbmctbmF0dXJhbC1jb21wYXJlJyk7XG5cbmV4cG9ydCB0eXBlIElMb2FkRGljdEZpbGVSb3cyPEQgZXh0ZW5kcyBhbnkgPSBbc3RyaW5nLCBudW1iZXIsIG51bWJlciwgLi4uYW55W11dPiA9IElMb2FkRGljdEZpbGVSb3c8RD4gJiB7XG5cdGZpbGU6IHN0cmluZyxcblx0Y2prX2lkOiBzdHJpbmcsXG5cblx0bGluZV90eXBlOiBFbnVtTGluZVR5cGUsXG59XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0lHTk9SRSA9IFtcblx0J2NoYXIqJyxcblx0JyoqL3NraXAnLFxuXHQnKiovamllYmEnLFxuXHQnKiovbGF6eScsXG5cdCcqKi9zeW5vbnltJyxcblx0JyoqL25hbWVzJyxcbl07XG5cbmV4cG9ydCBmdW5jdGlvbiBnbG9iRGljdChjd2Q6IHN0cmluZywgcGF0dGVybj86IHN0cmluZ1tdLCBpZ25vcmUgPSBERUZBVUxUX0lHTk9SRSlcbntcblx0cmV0dXJuIEJsdWViaXJkUHJvbWlzZVxuXHRcdC5yZXNvbHZlKEZhc3RHbG9iPHN0cmluZz4ocGF0dGVybiwge1xuXHRcdFx0Y3dkLFxuXHRcdFx0YWJzb2x1dGU6IHRydWUsXG5cdFx0XHRpZ25vcmUsXG5cdFx0XHRtYXJrRGlyZWN0b3JpZXM6IHRydWUsXG5cdFx0fSkpXG5cdFx0O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElMb2FkRGljdEZpbGVSb3c8RCA9IFtzdHJpbmcsIG51bWJlciwgbnVtYmVyLCAuLi5hbnlbXV0+XG57XG5cdGRhdGE6IEQsXG5cdGxpbmU6IHN0cmluZyxcblx0aW5kZXg6IG51bWJlcixcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWREaWN0RmlsZTxUID0gSUxvYWREaWN0RmlsZVJvdz4oZmlsZTogc3RyaW5nLFxuXHRmbj86IChsaXN0OiBUW10sIGN1cjogVCkgPT4gYm9vbGVhbixcblx0b3B0aW9ucz86IHtcblx0XHRwYXJzZUZuPzogKGxpbmU6IHN0cmluZykgPT4gYW55LFxuXHR9LFxuKTogQmx1ZWJpcmRQcm9taXNlPFRbXT5cbntcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdGNvbnN0IHBhcnNlRm4gPSBvcHRpb25zLnBhcnNlRm4gPSBvcHRpb25zLnBhcnNlRm4gfHwgcGFyc2VMaW5lU2VnbWVudDtcblxuXHRyZXR1cm4gbG9hZChmaWxlKVxuXHRcdC50aGVuKGZ1bmN0aW9uIChiKVxuXHRcdHtcblx0XHRcdHJldHVybiBiLnJlZHVjZShmdW5jdGlvbiAoYSwgbGluZSwgaW5kZXgsIGFycilcblx0XHRcdHtcblx0XHRcdFx0bGV0IGJvb2w6IGJvb2xlYW47XG5cblx0XHRcdFx0bGV0IGRhdGEgPSBwYXJzZUZuKGxpbmUpO1xuXG5cdFx0XHRcdGxldCBjdXIgPSB7XG5cdFx0XHRcdFx0ZGF0YSxcblx0XHRcdFx0XHRsaW5lLFxuXHRcdFx0XHRcdGluZGV4LFxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGlmIChmbilcblx0XHRcdFx0e1xuXHRcdFx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdFx0XHRib29sID0gZm4oYSwgY3VyKVxuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGJvb2wgPSB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGJvb2wpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRhLnB1c2goY3VyKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBhO1xuXHRcdFx0fSwgW10pO1xuXHRcdH0pXG5cdFx0O1xufVxuXG5leHBvcnQgZW51bSBFbnVtTGluZVR5cGVcbntcblx0QkFTRSA9IDAsXG5cdENPTU1FTlQgPSAxLFxuXHRDT01NRU5UX1RBRyA9IDIsXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGtMaW5lVHlwZShsaW5lOiBzdHJpbmcpOiBFbnVtTGluZVR5cGVcbntcblx0bGV0IHJldCA9IEVudW1MaW5lVHlwZS5CQVNFO1xuXG5cdGlmIChsaW5lLmluZGV4T2YoJy8vJykgPT0gMClcblx0e1xuXHRcdHJldCA9IEVudW1MaW5lVHlwZS5DT01NRU5UO1xuXG5cdFx0aWYgKC8gQHRvZG8vaS50ZXN0KGxpbmUpKVxuXHRcdHtcblx0XHRcdHJldCA9IEVudW1MaW5lVHlwZS5DT01NRU5UX1RBRztcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmFzZVNvcnRMaXN0PFQgPSBJTG9hZERpY3RGaWxlUm93Mj4obHM6IFRbXSwgYm9vbD86IGJvb2xlYW4pXG57XG5cdHJldHVybiBscy5zb3J0KGZ1bmN0aW9uIChhLCBiKVxuXHR7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdHJldHVybiBuYXR1cmFsQ29tcGFyZS5jYXNlSW5zZW5zaXRpdmUoYS5jamtfaWQsIGIuY2prX2lkKVxuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0fHwgbmF0dXJhbENvbXBhcmUuY2FzZUluc2Vuc2l0aXZlKGEuZGF0YVsxXSwgYi5kYXRhWzFdKVxuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0fHwgbmF0dXJhbENvbXBhcmUuY2FzZUluc2Vuc2l0aXZlKGEuZGF0YVswXSwgYi5kYXRhWzBdKVxuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0fHwgbmF0dXJhbENvbXBhcmUuY2FzZUluc2Vuc2l0aXZlKGEuZGF0YVsyXSwgYi5kYXRhWzJdKVxuXHRcdFx0O1xuXHR9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENqa05hbWUodzogc3RyaW5nLCBVU0VfQ0pLX01PREU6IG51bWJlcilcbntcblx0bGV0IGNqa19pZCA9IHc7XG5cblx0aWYgKFVTRV9DSktfTU9ERSA+IDEpXG5cdHtcblx0XHRsZXQgY2prX2xpc3QgPSB0ZXh0TGlzdCh3KTtcblx0XHRjamtfbGlzdC5zb3J0KCk7XG5cdFx0Y2prX2lkID0gY2prX2xpc3RbMF07XG5cdH1cblx0ZWxzZSBpZiAoVVNFX0NKS19NT0RFKVxuXHR7XG5cdFx0bGV0IGNqa19saXN0ID0gbGliVGFibGUuYXV0byh3KTtcblx0XHRjamtfbGlzdC5zb3J0KCk7XG5cdFx0Y2prX2lkID0gY2prX2xpc3RbMF07XG5cdH1cblxuXHRyZXR1cm4gY2prX2lkO1xufVxuIl19