"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const table_1 = require("cjk-conv/lib/zh/table");
const list_1 = require("cjk-conv/lib/zh/table/list");
const fast_glob_1 = require("fast-glob");
const BluebirdPromise = require("bluebird");
const line_1 = require("../lib/loader/line");
const index_1 = require("../lib/loader/segment/index");
const naturalCompare = require("string-natural-compare");
exports.DEFAULT_IGNORE = [
    'char*',
    '**/skip',
    '**/jieba',
    '**/lazy',
    '**/synonym',
    '**/names',
];
function globDict(cwd, pattern, ignore = exports.DEFAULT_IGNORE) {
    return BluebirdPromise
        .resolve(fast_glob_1.default(pattern, {
        cwd,
        absolute: true,
        ignore,
        markDirectories: true,
    }));
}
exports.globDict = globDict;
function loadDictFile(file, fn) {
    return line_1.default(file)
        .then(function (b) {
        return b.reduce(function (a, line, index, arr) {
            let bool;
            let data = index_1.parseLine(line);
            let cur = {
                data,
                line,
                index,
            };
            if (fn) {
                // @ts-ignore
                bool = fn(a, cur);
            }
            else {
                bool = true;
            }
            if (bool) {
                a.push(cur);
            }
            return a;
        }, []);
    });
}
exports.loadDictFile = loadDictFile;
var EnumLineType;
(function (EnumLineType) {
    EnumLineType[EnumLineType["BASE"] = 0] = "BASE";
    EnumLineType[EnumLineType["COMMENT"] = 1] = "COMMENT";
    EnumLineType[EnumLineType["COMMENT_TAG"] = 2] = "COMMENT_TAG";
})(EnumLineType = exports.EnumLineType || (exports.EnumLineType = {}));
function chkLineType(line) {
    let ret = EnumLineType.BASE;
    if (line.indexOf('//') == 0) {
        ret = EnumLineType.COMMENT;
        if (/ @todo/i.test(line)) {
            ret = EnumLineType.COMMENT_TAG;
        }
    }
    return ret;
}
exports.chkLineType = chkLineType;
function baseSortList(ls, bool) {
    return ls.sort(function (a, b) {
        // @ts-ignore
        return naturalCompare.caseInsensitive(a.cjk_id, b.cjk_id)
            // @ts-ignore
            || naturalCompare.caseInsensitive(b.data[1], a.data[1])
            // @ts-ignore
            || naturalCompare.caseInsensitive(a.data[0], b.data[0])
            // @ts-ignore
            || naturalCompare.caseInsensitive(a.data[2], b.data[2]);
    });
}
exports.baseSortList = baseSortList;
function getCjkName(w, USE_CJK_MODE) {
    let cjk_id = w;
    if (USE_CJK_MODE > 1) {
        let cjk_list = list_1.textList(w);
        cjk_list.sort();
        cjk_id = cjk_list[0];
    }
    else if (USE_CJK_MODE) {
        let cjk_list = table_1.default.auto(w);
        cjk_list.sort();
        cjk_id = cjk_list[0];
    }
    return cjk_id;
}
exports.getCjkName = getCjkName;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBNkM7QUFDN0MscURBQXNEO0FBQ3RELHlDQUFpQztBQUNqQyw0Q0FBNkM7QUFDN0MsNkNBQStFO0FBQy9FLHVEQUFxSDtBQUVySCx5REFBMEQ7QUFTN0MsUUFBQSxjQUFjLEdBQUc7SUFDN0IsT0FBTztJQUNQLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFlBQVk7SUFDWixVQUFVO0NBQ1YsQ0FBQztBQUVGLFNBQWdCLFFBQVEsQ0FBQyxHQUFXLEVBQUUsT0FBa0IsRUFBRSxNQUFNLEdBQUcsc0JBQWM7SUFFaEYsT0FBTyxlQUFlO1NBQ3BCLE9BQU8sQ0FBQyxtQkFBUSxDQUFTLE9BQU8sRUFBRTtRQUNsQyxHQUFHO1FBQ0gsUUFBUSxFQUFFLElBQUk7UUFDZCxNQUFNO1FBQ04sZUFBZSxFQUFFLElBQUk7S0FDckIsQ0FBQyxDQUFDLENBQ0Y7QUFDSCxDQUFDO0FBVkQsNEJBVUM7QUFTRCxTQUFnQixZQUFZLENBQXVCLElBQVksRUFDOUQsRUFBbUM7SUFHbkMsT0FBTyxjQUFJLENBQUMsSUFBSSxDQUFDO1NBQ2YsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUVoQixPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHO1lBRTVDLElBQUksSUFBYSxDQUFDO1lBRWxCLElBQUksSUFBSSxHQUFHLGlCQUFnQixDQUFDLElBQUksQ0FBdUMsQ0FBQztZQUV4RSxJQUFJLEdBQUcsR0FBRztnQkFDVCxJQUFJO2dCQUNKLElBQUk7Z0JBQ0osS0FBSzthQUNMLENBQUM7WUFFRixJQUFJLEVBQUUsRUFDTjtnQkFDQyxhQUFhO2dCQUNiLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO2FBQ2pCO2lCQUVEO2dCQUNDLElBQUksR0FBRyxJQUFJLENBQUM7YUFDWjtZQUVELElBQUksSUFBSSxFQUNSO2dCQUNDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDWjtZQUVELE9BQU8sQ0FBQyxDQUFDO1FBQ1YsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ1IsQ0FBQyxDQUFDLENBQ0Q7QUFDSCxDQUFDO0FBdENELG9DQXNDQztBQUVELElBQVksWUFLWDtBQUxELFdBQVksWUFBWTtJQUV2QiwrQ0FBUSxDQUFBO0lBQ1IscURBQVcsQ0FBQTtJQUNYLDZEQUFlLENBQUE7QUFDaEIsQ0FBQyxFQUxXLFlBQVksR0FBWixvQkFBWSxLQUFaLG9CQUFZLFFBS3ZCO0FBRUQsU0FBZ0IsV0FBVyxDQUFDLElBQVk7SUFFdkMsSUFBSSxHQUFHLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQztJQUU1QixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUMzQjtRQUNDLEdBQUcsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDO1FBRTNCLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFDeEI7WUFDQyxHQUFHLEdBQUcsWUFBWSxDQUFDLFdBQVcsQ0FBQztTQUMvQjtLQUNEO0lBRUQsT0FBTyxHQUFHLENBQUM7QUFDWixDQUFDO0FBZkQsa0NBZUM7QUFFRCxTQUFnQixZQUFZLENBQXdCLEVBQU8sRUFBRSxJQUFjO0lBRTFFLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO1FBRTVCLGFBQWE7UUFDYixPQUFPLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDO1lBQ3hELGFBQWE7ZUFDVixjQUFjLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2RCxhQUFhO2VBQ1YsY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkQsYUFBYTtlQUNWLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ3REO0lBQ0gsQ0FBQyxDQUFDLENBQUM7QUFDSixDQUFDO0FBZEQsb0NBY0M7QUFFRCxTQUFnQixVQUFVLENBQUMsQ0FBUyxFQUFFLFlBQW9CO0lBRXpELElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztJQUVmLElBQUksWUFBWSxHQUFHLENBQUMsRUFDcEI7UUFDQyxJQUFJLFFBQVEsR0FBRyxlQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0IsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2hCLE1BQU0sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDckI7U0FDSSxJQUFJLFlBQVksRUFDckI7UUFDQyxJQUFJLFFBQVEsR0FBRyxlQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNoQixNQUFNLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3JCO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDZixDQUFDO0FBbEJELGdDQWtCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsaWJUYWJsZSBmcm9tICdjamstY29udi9saWIvemgvdGFibGUnO1xuaW1wb3J0IHsgdGV4dExpc3QgfSBmcm9tICdjamstY29udi9saWIvemgvdGFibGUvbGlzdCc7XG5pbXBvcnQgRmFzdEdsb2IgZnJvbSAnZmFzdC1nbG9iJztcbmltcG9ydCBCbHVlYmlyZFByb21pc2UgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xuaW1wb3J0IGxvYWQsIHsgcGFyc2VMaW5lLCBzdHJpbmdpZnlMaW5lLCBzZXJpYWxpemUgfSBmcm9tICcuLi9saWIvbG9hZGVyL2xpbmUnO1xuaW1wb3J0IHsgSURpY3RSb3csIHBhcnNlTGluZSBhcyBwYXJzZUxpbmVTZWdtZW50LCBzZXJpYWxpemUgYXMgc2VyaWFsaXplU2VnbWVudCB9IGZyb20gJy4uL2xpYi9sb2FkZXIvc2VnbWVudC9pbmRleCc7XG5pbXBvcnQgeyBJQ1VSX1dPUkQgfSBmcm9tICcuLi90ZXN0L3NvcnQnO1xuaW1wb3J0IG5hdHVyYWxDb21wYXJlID0gcmVxdWlyZSgnc3RyaW5nLW5hdHVyYWwtY29tcGFyZScpO1xuXG5leHBvcnQgdHlwZSBJTG9hZERpY3RGaWxlUm93MiA9IElMb2FkRGljdEZpbGVSb3cgJiB7XG5cdGZpbGU6IHN0cmluZyxcblx0Y2prX2lkOiBzdHJpbmcsXG5cblx0bGluZV90eXBlOiBFbnVtTGluZVR5cGUsXG59XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0lHTk9SRSA9IFtcblx0J2NoYXIqJyxcblx0JyoqL3NraXAnLFxuXHQnKiovamllYmEnLFxuXHQnKiovbGF6eScsXG5cdCcqKi9zeW5vbnltJyxcblx0JyoqL25hbWVzJyxcbl07XG5cbmV4cG9ydCBmdW5jdGlvbiBnbG9iRGljdChjd2Q6IHN0cmluZywgcGF0dGVybj86IHN0cmluZ1tdLCBpZ25vcmUgPSBERUZBVUxUX0lHTk9SRSlcbntcblx0cmV0dXJuIEJsdWViaXJkUHJvbWlzZVxuXHRcdC5yZXNvbHZlKEZhc3RHbG9iPHN0cmluZz4ocGF0dGVybiwge1xuXHRcdFx0Y3dkLFxuXHRcdFx0YWJzb2x1dGU6IHRydWUsXG5cdFx0XHRpZ25vcmUsXG5cdFx0XHRtYXJrRGlyZWN0b3JpZXM6IHRydWUsXG5cdFx0fSkpXG5cdFx0O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElMb2FkRGljdEZpbGVSb3dcbntcblx0ZGF0YTogW3N0cmluZywgbnVtYmVyLCBudW1iZXIsIC4uLmFueVtdXSxcblx0bGluZTogc3RyaW5nLFxuXHRpbmRleDogbnVtYmVyLFxufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZERpY3RGaWxlPFQgPSBJTG9hZERpY3RGaWxlUm93PihmaWxlOiBzdHJpbmcsXG5cdGZuPzogKGxpc3Q6IFRbXSwgY3VyOiBUKSA9PiBib29sZWFuLFxuKTogQmx1ZWJpcmRQcm9taXNlPFRbXT5cbntcblx0cmV0dXJuIGxvYWQoZmlsZSlcblx0XHQudGhlbihmdW5jdGlvbiAoYilcblx0XHR7XG5cdFx0XHRyZXR1cm4gYi5yZWR1Y2UoZnVuY3Rpb24gKGEsIGxpbmUsIGluZGV4LCBhcnIpXG5cdFx0XHR7XG5cdFx0XHRcdGxldCBib29sOiBib29sZWFuO1xuXG5cdFx0XHRcdGxldCBkYXRhID0gcGFyc2VMaW5lU2VnbWVudChsaW5lKSBhcyBbc3RyaW5nLCBudW1iZXIsIG51bWJlciwgLi4uYW55W11dO1xuXG5cdFx0XHRcdGxldCBjdXIgPSB7XG5cdFx0XHRcdFx0ZGF0YSxcblx0XHRcdFx0XHRsaW5lLFxuXHRcdFx0XHRcdGluZGV4LFxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGlmIChmbilcblx0XHRcdFx0e1xuXHRcdFx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdFx0XHRib29sID0gZm4oYSwgY3VyKVxuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGJvb2wgPSB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGJvb2wpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRhLnB1c2goY3VyKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBhO1xuXHRcdFx0fSwgW10pO1xuXHRcdH0pXG5cdFx0O1xufVxuXG5leHBvcnQgZW51bSBFbnVtTGluZVR5cGVcbntcblx0QkFTRSA9IDAsXG5cdENPTU1FTlQgPSAxLFxuXHRDT01NRU5UX1RBRyA9IDIsXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGtMaW5lVHlwZShsaW5lOiBzdHJpbmcpOiBFbnVtTGluZVR5cGVcbntcblx0bGV0IHJldCA9IEVudW1MaW5lVHlwZS5CQVNFO1xuXG5cdGlmIChsaW5lLmluZGV4T2YoJy8vJykgPT0gMClcblx0e1xuXHRcdHJldCA9IEVudW1MaW5lVHlwZS5DT01NRU5UO1xuXG5cdFx0aWYgKC8gQHRvZG8vaS50ZXN0KGxpbmUpKVxuXHRcdHtcblx0XHRcdHJldCA9IEVudW1MaW5lVHlwZS5DT01NRU5UX1RBRztcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmFzZVNvcnRMaXN0PFQgPSBJTG9hZERpY3RGaWxlUm93Mj4obHM6IFRbXSwgYm9vbD86IGJvb2xlYW4pXG57XG5cdHJldHVybiBscy5zb3J0KGZ1bmN0aW9uIChhLCBiKVxuXHR7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdHJldHVybiBuYXR1cmFsQ29tcGFyZS5jYXNlSW5zZW5zaXRpdmUoYS5jamtfaWQsIGIuY2prX2lkKVxuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0fHwgbmF0dXJhbENvbXBhcmUuY2FzZUluc2Vuc2l0aXZlKGIuZGF0YVsxXSwgYS5kYXRhWzFdKVxuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0fHwgbmF0dXJhbENvbXBhcmUuY2FzZUluc2Vuc2l0aXZlKGEuZGF0YVswXSwgYi5kYXRhWzBdKVxuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0fHwgbmF0dXJhbENvbXBhcmUuY2FzZUluc2Vuc2l0aXZlKGEuZGF0YVsyXSwgYi5kYXRhWzJdKVxuXHRcdFx0O1xuXHR9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENqa05hbWUodzogc3RyaW5nLCBVU0VfQ0pLX01PREU6IG51bWJlcilcbntcblx0bGV0IGNqa19pZCA9IHc7XG5cblx0aWYgKFVTRV9DSktfTU9ERSA+IDEpXG5cdHtcblx0XHRsZXQgY2prX2xpc3QgPSB0ZXh0TGlzdCh3KTtcblx0XHRjamtfbGlzdC5zb3J0KCk7XG5cdFx0Y2prX2lkID0gY2prX2xpc3RbMF07XG5cdH1cblx0ZWxzZSBpZiAoVVNFX0NKS19NT0RFKVxuXHR7XG5cdFx0bGV0IGNqa19saXN0ID0gbGliVGFibGUuYXV0byh3KTtcblx0XHRjamtfbGlzdC5zb3J0KCk7XG5cdFx0Y2prX2lkID0gY2prX2xpc3RbMF07XG5cdH1cblxuXHRyZXR1cm4gY2prX2lkO1xufVxuIl19