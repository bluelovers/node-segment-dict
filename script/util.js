"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const table_1 = require("cjk-conv/lib/zh/table");
const list_1 = require("cjk-conv/lib/zh/table/list");
const fast_glob_1 = require("fast-glob");
const BluebirdPromise = require("bluebird");
const line_1 = require("../lib/loader/line");
const index_1 = require("../lib/loader/segment/index");
const naturalCompare = require("string-natural-compare");
const array_hyper_unique_1 = require("array-hyper-unique");
const StrUtil = require("str-util");
exports.DEFAULT_IGNORE = [
    //'char*',
    '**/skip',
    '**/jieba',
    '**/lazy',
    '**/synonym',
    '**/names',
];
function globDict(cwd, pattern, ignore = exports.DEFAULT_IGNORE) {
    return BluebirdPromise
        .resolve(fast_glob_1.default(pattern, {
        cwd,
        absolute: true,
        ignore,
        markDirectories: true,
    }));
}
exports.globDict = globDict;
function loadDictFile(file, fn, options) {
    options = options || {};
    const parseFn = options.parseFn = options.parseFn || index_1.parseLine;
    return line_1.default(file)
        .then(function (b) {
        return b.reduce(function (a, line, index, arr) {
            let bool;
            let data = parseFn(line);
            let cur = {
                data,
                line,
                index,
            };
            if (fn) {
                // @ts-ignore
                bool = fn(a, cur);
            }
            else {
                bool = true;
            }
            if (bool) {
                a.push(cur);
            }
            return a;
        }, []);
    });
}
exports.loadDictFile = loadDictFile;
var EnumLineType;
(function (EnumLineType) {
    EnumLineType[EnumLineType["BASE"] = 0] = "BASE";
    EnumLineType[EnumLineType["COMMENT"] = 1] = "COMMENT";
    EnumLineType[EnumLineType["COMMENT_TAG"] = 2] = "COMMENT_TAG";
})(EnumLineType = exports.EnumLineType || (exports.EnumLineType = {}));
function chkLineType(line) {
    let ret = EnumLineType.BASE;
    if (line.indexOf('//') == 0) {
        ret = EnumLineType.COMMENT;
        if (/ @todo/i.test(line)) {
            ret = EnumLineType.COMMENT_TAG;
        }
    }
    return ret;
}
exports.chkLineType = chkLineType;
function baseSortList(ls, bool) {
    return ls.sort(function (a, b) {
        // @ts-ignore
        return naturalCompare.caseInsensitive(a.cjk_id, b.cjk_id)
            // @ts-ignore
            || naturalCompare.caseInsensitive(a.data[1], b.data[1])
            // @ts-ignore
            || naturalCompare.caseInsensitive(a.data[0], b.data[0])
            // @ts-ignore
            || naturalCompare.caseInsensitive(a.data[2], b.data[2]);
    });
}
exports.baseSortList = baseSortList;
function getCjkName(w, USE_CJK_MODE) {
    let cjk_id = w;
    if (1) {
        cjk_id = list_1.slugify(w, true);
    }
    else if (USE_CJK_MODE > 1) {
        let cjk_list = list_1.textList(w);
        cjk_list.sort();
        cjk_id = cjk_list[0];
    }
    else if (USE_CJK_MODE) {
        let cjk_list = table_1.default.auto(w);
        cjk_list.sort();
        cjk_id = cjk_list[0];
    }
    return StrUtil.toHalfWidth(cjk_id);
}
exports.getCjkName = getCjkName;
let _zhDictCompareTable = ((a, b) => {
    return array_hyper_unique_1.array_unique(a.map((value, index, array) => {
        return array_hyper_unique_1.array_unique(value.reduce(function (c, d, currentIndex) {
            c.push(d);
            c.push(b[index][currentIndex]);
            return c;
        }, []));
    }));
})([
    ['一', '二', '两', '三', '四', '五', '六', '七', '八', '九', '十', '十', '零', '幾', '個', '百', '千', '萬', '億'],
    ['上', '下', '左', '右'],
    ['東', '南', '西', '北'],
    ['大', '小'],
    ['高', '低'],
    ['長', '短'],
    ['內', '外'],
    ['男', '女'],
    ['前', '後'],
    ['只', '支', '隻'],
    ['他', '她', '它', '我', '你', '吾', '汝'],
    ['快', '慢'],
    ['春', '夏', '秋', '冬'],
    ['什', '甚'],
    ['侭', '儘', '尽', '盡'],
    ['的', '得'],
    ['胡', '糊', '鬍'],
    ['壹', '貳', '參', '肆', '伍', '陸', '柒', '捌', '玖', '拾', '什'],
    ['儅', '噹', '当', '當'],
    ['炮', '砲', '炰', '泡'],
    ['仲'],
    ['原'],
], [
    ['一', '二', '两', '三', '四', '五', '六', '七', '八', '九', '十', '十', '零', '几', '个', '百', '千', '万', '亿'],
    ['上', '下', '左', '右'],
    ['东', '南', '西', '北'],
    ['大', '小'],
    ['高', '低'],
    ['长', '短'],
    ['内', '外'],
    ['男', '女'],
    ['前', '后'],
    ['只', '支', '隻'],
    ['他', '她', '它', '我', '你', '吾', '汝'],
    ['快', '慢'],
    ['春', '夏', '秋', '冬'],
    ['什', '甚'],
    ['侭', '儘', '尽', '盡'],
    ['的', '得'],
    ['胡', '糊', '鬍'],
    ['壹', '贰', '参', '肆', '伍', '陆', '柒', '捌', '玖', '拾', '什'],
    ['儅', '噹', '当', '當'],
    ['炮', '砲', '炰', '泡'],
    ['中'],
    ['元'],
]);
let _zhDictCompareTable_chars = array_hyper_unique_1.array_unique(_zhDictCompareTable.flat());
function zhDictCompare(a, b) {
    let _c = 0;
    let _a0 = a[0];
    let _b0 = b[0];
    let _a;
    let _b;
    let aa = /[\u3400-\u4DBF\u4E00-\u9FFF\u{20000}-\u{2FA1F}]/u.test(a[0]);
    let bb = /[\u3400-\u4DBF\u4E00-\u9FFF\u{20000}-\u{2FA1F}]/u.test(b[0]);
    if (aa && bb) {
        if (a.length != b.length && (a.length == 1 || b.length == 1)) {
            return a.length - b.length;
        }
        _a = _zhDictCompareTable[0].indexOf(a[0]);
        _b = _zhDictCompareTable[0].indexOf(b[0]);
        aa = _a != -1;
        bb = _b != -1;
        if (aa && !bb) {
            return -1;
        }
        else if (!aa && bb) {
            return 1;
        }
    }
    else {
        if (aa && !bb) {
            return 0;
        }
        else if (!aa && bb) {
            return -1;
        }
    }
    if (_a0 != null) {
        let len = a.length;
        for (let i = 0; i < len; i++) {
            if (!a[i] || !b[i] || a[i] == null || b[i] == null) {
                break;
            }
            else if (a[i] !== b[i]) {
                _a0 = a[i];
                _b0 = b[i];
                break;
            }
        }
    }
    if (_zhDictCompareTable_chars.includes(_a0) && _zhDictCompareTable_chars.includes(_b0)) {
        for (let _arr of _zhDictCompareTable) {
            _a = _arr.indexOf(_a0);
            _b = _arr.indexOf(_b0);
            if (_a > -1 && _b > -1) {
                _c = (_a - _b) || 0;
                break;
            }
        }
    }
    return _c || naturalCompare.caseInsensitive(a, b);
}
exports.zhDictCompare = zhDictCompare;
//console.log(['第', '一', 'Ｔ', '网开一面', '三街六市'].sort(zhDictCompare));
//# sourceMappingURL=data:application/json;base64,