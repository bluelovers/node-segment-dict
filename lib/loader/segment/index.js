"use strict";
/**
 * Created by user on 2018/3/14/014.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Loader = exports.serialize = exports.stringifyLine = exports.parseLine = exports.loadStreamSync = exports.loadStream = exports.loadSync = exports.load = void 0;
const _class_1 = require("../_class");
const libLoader = new _class_1.default({
    parseLine(input) {
        let [str, n, s, ...plus] = input
            .replace(/^\s+|\s+$/, '')
            .split(/\|/g)
            .map(v => v.trim());
        let d1 = Number(n);
        let d2 = Number(s);
        if (Number.isNaN(d1)) {
            // @ts-ignore
            d1 = 0;
        }
        if (Number.isNaN(d2)) {
            // @ts-ignore
            d2 = 0;
        }
        // @ts-ignore
        return [str, d1, d2, ...plus];
    },
    filter(line) {
        line = line
            .replace(/\uFEFF/g, '')
            .trim()
            .replace(/^\s+|\s+$/, '');
        if (line && line.indexOf('\/\/') != 0) {
            return line;
        }
    },
    stringifyLine(data) {
        let a = [];
        // @ts-ignore
        a = data
            .slice();
        if (a.length > 1) {
            // @ts-ignore
            if (!a[1] || Number.isNaN(a[1])) {
                // @ts-ignore
                a[1] = 0;
            }
            // @ts-ignore
            a[1] = '0x' + a[1]
                .toString(16)
                .padStart(4, '0')
                .toUpperCase();
        }
        if (a.length > 2) {
            // @ts-ignore
            if (!a[2] || Number.isNaN(a[2])) {
                // @ts-ignore
                a[2] = 0;
            }
        }
        return a.join('|');
    }
});
exports.load = libLoader.load;
exports.loadSync = libLoader.loadSync;
exports.loadStream = libLoader.loadStream;
exports.loadStreamSync = libLoader.loadStreamSync;
exports.parseLine = libLoader.parseLine;
exports.stringifyLine = libLoader.stringifyLine;
exports.serialize = libLoader.serialize;
exports.Loader = libLoader;
exports.default = libLoader.load;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7OztBQU1ILHNDQUFvQztBQVlwQyxNQUFNLFNBQVMsR0FBRyxJQUFJLGdCQUFXLENBQWtCO0lBQ2xELFNBQVMsQ0FBQyxLQUFhO1FBRXRCLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLEtBQUs7YUFDOUIsT0FBTyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUM7YUFDeEIsS0FBSyxDQUFDLEtBQUssQ0FBQzthQUNaLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUNuQjtRQUVELElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuQixJQUFJLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFbkIsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUNwQjtZQUNDLGFBQWE7WUFDYixFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ1A7UUFDRCxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQ3BCO1lBQ0MsYUFBYTtZQUNiLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDUDtRQUVELGFBQWE7UUFDYixPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsTUFBTSxDQUFDLElBQVk7UUFFbEIsSUFBSSxHQUFHLElBQUk7YUFDVCxPQUFPLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQzthQUN0QixJQUFJLEVBQUU7YUFDTixPQUFPLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUN6QjtRQUVELElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUNyQztZQUNDLE9BQU8sSUFBSSxDQUFDO1NBQ1o7SUFDRixDQUFDO0lBRUQsYUFBYSxDQUFDLElBQUk7UUFFakIsSUFBSSxDQUFDLEdBQWEsRUFBRSxDQUFDO1FBRXJCLGFBQWE7UUFDYixDQUFDLEdBQUcsSUFBSTthQUNOLEtBQUssRUFBRSxDQUNSO1FBRUQsSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFDaEI7WUFDQyxhQUFhO1lBQ2IsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUMvQjtnQkFDQyxhQUFhO2dCQUNiLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDVDtZQUVELGFBQWE7WUFDYixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ2hCLFFBQVEsQ0FBQyxFQUFFLENBQUM7aUJBQ1osUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUM7aUJBQ2hCLFdBQVcsRUFBRSxDQUNkO1NBQ0Q7UUFFRCxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUNoQjtZQUNDLGFBQWE7WUFDYixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQy9CO2dCQUNDLGFBQWE7Z0JBQ2IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNUO1NBQ0Q7UUFFRCxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDcEIsQ0FBQztDQUNELENBQUMsQ0FBQztBQUVVLFFBQUEsSUFBSSxHQUFHLFNBQVMsQ0FBQyxJQUE2QixDQUFDO0FBQy9DLFFBQUEsUUFBUSxHQUFHLFNBQVMsQ0FBQyxRQUFxQyxDQUFDO0FBRTNELFFBQUEsVUFBVSxHQUFHLFNBQVMsQ0FBQyxVQUF5QyxDQUFDO0FBQ2pFLFFBQUEsY0FBYyxHQUFHLFNBQVMsQ0FBQyxjQUFpRCxDQUFDO0FBRTdFLFFBQUEsU0FBUyxHQUFHLFNBQVMsQ0FBQyxTQUF1QyxDQUFDO0FBQzlELFFBQUEsYUFBYSxHQUFHLFNBQVMsQ0FBQyxhQUErQyxDQUFDO0FBRTFFLFFBQUEsU0FBUyxHQUFHLFNBQVMsQ0FBQyxTQUF1QyxDQUFDO0FBRTlELFFBQUEsTUFBTSxHQUFHLFNBQVMsQ0FBQztBQUVoQyxrQkFBZSxTQUFTLENBQUMsSUFBNkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSB1c2VyIG9uIDIwMTgvMy8xNC8wMTQuXG4gKi9cblxuaW1wb3J0IHsgd3JhcFN0cmVhbVRvUHJvbWlzZSwgSVN0cmVhbUxpbmVXaXRoVmFsdWUgfSBmcm9tICcuLi8uLi9mcy9saW5lJztcbmltcG9ydCBQcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcbmltcG9ydCBjcmVhdGVMb2FkU3RyZWFtLCB7IElDYWxsYmFjayB9IGZyb20gJy4uLy4uL2ZzL3N0cmVhbSc7XG5pbXBvcnQgY3JlYXRlTG9hZFN0cmVhbVN5bmMgZnJvbSAnLi4vLi4vZnMvc3luYyc7XG5pbXBvcnQgTG9hZGVyQ2xhc3MgZnJvbSAnLi4vX2NsYXNzJztcblxuZXhwb3J0IHR5cGUgSURpY3RSb3c8VCA9IHN0cmluZz4gPSB7XG5cdDA6IHN0cmluZyxcblx0MTogbnVtYmVyLFxuXHQyOiBudW1iZXIsXG5cdFtpbmRleDogbnVtYmVyXTogVCB8IHN0cmluZyB8IG51bWJlcixcblx0Ly9sZW5ndGg6IG51bWJlcixcbn0gJiBBcnJheTxzdHJpbmcgfCBudW1iZXI+O1xuXG5leHBvcnQgdHlwZSBJRGljdCA9IElEaWN0Um93W107XG5cbmNvbnN0IGxpYkxvYWRlciA9IG5ldyBMb2FkZXJDbGFzczxJRGljdCwgSURpY3RSb3c+KHtcblx0cGFyc2VMaW5lKGlucHV0OiBzdHJpbmcpOiBJRGljdFJvd1xuXHR7XG5cdFx0bGV0IFtzdHIsIG4sIHMsIC4uLnBsdXNdID0gaW5wdXRcblx0XHRcdC5yZXBsYWNlKC9eXFxzK3xcXHMrJC8sICcnKVxuXHRcdFx0LnNwbGl0KC9cXHwvZylcblx0XHRcdC5tYXAodiA9PiB2LnRyaW0oKSlcblx0XHQ7XG5cblx0XHRsZXQgZDEgPSBOdW1iZXIobik7XG5cdFx0bGV0IGQyID0gTnVtYmVyKHMpO1xuXG5cdFx0aWYgKE51bWJlci5pc05hTihkMSkpXG5cdFx0e1xuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0ZDEgPSAwO1xuXHRcdH1cblx0XHRpZiAoTnVtYmVyLmlzTmFOKGQyKSlcblx0XHR7XG5cdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRkMiA9IDA7XG5cdFx0fVxuXG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdHJldHVybiBbc3RyLCBkMSwgZDIsIC4uLnBsdXNdO1xuXHR9LFxuXG5cdGZpbHRlcihsaW5lOiBzdHJpbmcpXG5cdHtcblx0XHRsaW5lID0gbGluZVxuXHRcdFx0LnJlcGxhY2UoL1xcdUZFRkYvZywgJycpXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlxccyt8XFxzKyQvLCAnJylcblx0XHQ7XG5cblx0XHRpZiAobGluZSAmJiBsaW5lLmluZGV4T2YoJ1xcL1xcLycpICE9IDApXG5cdFx0e1xuXHRcdFx0cmV0dXJuIGxpbmU7XG5cdFx0fVxuXHR9LFxuXG5cdHN0cmluZ2lmeUxpbmUoZGF0YSlcblx0e1xuXHRcdGxldCBhOiBzdHJpbmdbXSA9IFtdO1xuXG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGEgPSBkYXRhXG5cdFx0XHQuc2xpY2UoKVxuXHRcdDtcblxuXHRcdGlmIChhLmxlbmd0aCA+IDEpXG5cdFx0e1xuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0aWYgKCFhWzFdIHx8IE51bWJlci5pc05hTihhWzFdKSlcblx0XHRcdHtcblx0XHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0XHRhWzFdID0gMDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0YVsxXSA9ICcweCcgKyBhWzFdXG5cdFx0XHRcdC50b1N0cmluZygxNilcblx0XHRcdFx0LnBhZFN0YXJ0KDQsICcwJylcblx0XHRcdFx0LnRvVXBwZXJDYXNlKClcblx0XHRcdDtcblx0XHR9XG5cblx0XHRpZiAoYS5sZW5ndGggPiAyKVxuXHRcdHtcblx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdGlmICghYVsyXSB8fCBOdW1iZXIuaXNOYU4oYVsyXSkpXG5cdFx0XHR7XG5cdFx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdFx0YVsyXSA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGEuam9pbignfCcpO1xuXHR9XG59KTtcblxuZXhwb3J0IGNvbnN0IGxvYWQgPSBsaWJMb2FkZXIubG9hZCBhcyB0eXBlb2YgbGliTG9hZGVyLmxvYWQ7XG5leHBvcnQgY29uc3QgbG9hZFN5bmMgPSBsaWJMb2FkZXIubG9hZFN5bmMgYXMgdHlwZW9mIGxpYkxvYWRlci5sb2FkU3luYztcblxuZXhwb3J0IGNvbnN0IGxvYWRTdHJlYW0gPSBsaWJMb2FkZXIubG9hZFN0cmVhbSBhcyB0eXBlb2YgbGliTG9hZGVyLmxvYWRTdHJlYW07XG5leHBvcnQgY29uc3QgbG9hZFN0cmVhbVN5bmMgPSBsaWJMb2FkZXIubG9hZFN0cmVhbVN5bmMgYXMgdHlwZW9mIGxpYkxvYWRlci5sb2FkU3RyZWFtU3luYztcblxuZXhwb3J0IGNvbnN0IHBhcnNlTGluZSA9IGxpYkxvYWRlci5wYXJzZUxpbmUgYXMgdHlwZW9mIGxpYkxvYWRlci5wYXJzZUxpbmU7XG5leHBvcnQgY29uc3Qgc3RyaW5naWZ5TGluZSA9IGxpYkxvYWRlci5zdHJpbmdpZnlMaW5lIGFzIHR5cGVvZiBsaWJMb2FkZXIuc3RyaW5naWZ5TGluZTtcblxuZXhwb3J0IGNvbnN0IHNlcmlhbGl6ZSA9IGxpYkxvYWRlci5zZXJpYWxpemUgYXMgdHlwZW9mIGxpYkxvYWRlci5zZXJpYWxpemU7XG5cbmV4cG9ydCBjb25zdCBMb2FkZXIgPSBsaWJMb2FkZXI7XG5cbmV4cG9ydCBkZWZhdWx0IGxpYkxvYWRlci5sb2FkIGFzIHR5cGVvZiBsaWJMb2FkZXIubG9hZDtcbiJdfQ==