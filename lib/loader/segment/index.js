"use strict";
/**
 * Created by user on 2018/3/14/014.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const _class_1 = require("../_class");
const libLoader = new _class_1.default({
    parseLine(input) {
        let [str, n, s, ...plus] = input
            .replace(/^\s+|\s+$/, '')
            .split(/\|/g)
            .map(v => v.trim());
        let d1 = Number(n);
        let d2 = Number(s);
        if (Number.isNaN(d1)) {
            // @ts-ignore
            d1 = 0;
        }
        if (Number.isNaN(d2)) {
            // @ts-ignore
            d2 = 0;
        }
        // @ts-ignore
        return [str, d1, d2, ...plus];
    },
    filter(line) {
        line = line
            .replace(/\uFEFF/g, '')
            .trim()
            .replace(/^\s+|\s+$/, '');
        if (line && line.indexOf('\/\/') != 0) {
            return line;
        }
    },
    stringifyLine(data) {
        let a = [];
        // @ts-ignore
        a = data
            .slice();
        if (a.length > 1) {
            // @ts-ignore
            if (!a[1] || Number.isNaN(a[1])) {
                // @ts-ignore
                a[1] = 0;
            }
            // @ts-ignore
            a[1] = '0x' + a[1]
                .toString(16)
                .padStart(4, '0')
                .toUpperCase();
        }
        if (a.length > 2) {
            // @ts-ignore
            if (!a[2] || Number.isNaN(a[2])) {
                // @ts-ignore
                a[2] = 0;
            }
        }
        return a.join('|');
    }
});
exports.load = libLoader.load;
exports.loadSync = libLoader.loadSync;
exports.loadStream = libLoader.loadStream;
exports.loadStreamSync = libLoader.loadStreamSync;
exports.parseLine = libLoader.parseLine;
exports.stringifyLine = libLoader.stringifyLine;
exports.serialize = libLoader.serialize;
exports.Loader = libLoader;
exports.default = libLoader.load;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBTUgsc0NBQW9DO0FBWXBDLE1BQU0sU0FBUyxHQUFHLElBQUksZ0JBQVcsQ0FBa0I7SUFDbEQsU0FBUyxDQUFDLEtBQWE7UUFFdEIsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsS0FBSzthQUM5QixPQUFPLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQzthQUN4QixLQUFLLENBQUMsS0FBSyxDQUFDO2FBQ1osR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQ25CO1FBRUQsSUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25CLElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVuQixJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQ3BCO1lBQ0MsYUFBYTtZQUNiLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDUDtRQUNELElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFDcEI7WUFDQyxhQUFhO1lBQ2IsRUFBRSxHQUFHLENBQUMsQ0FBQztTQUNQO1FBRUQsYUFBYTtRQUNiLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBWTtRQUVsQixJQUFJLEdBQUcsSUFBSTthQUNULE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDO2FBQ3RCLElBQUksRUFBRTthQUNOLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQ3pCO1FBRUQsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQ3JDO1lBQ0MsT0FBTyxJQUFJLENBQUM7U0FDWjtJQUNGLENBQUM7SUFFRCxhQUFhLENBQUMsSUFBSTtRQUVqQixJQUFJLENBQUMsR0FBYSxFQUFFLENBQUM7UUFFckIsYUFBYTtRQUNiLENBQUMsR0FBRyxJQUFJO2FBQ04sS0FBSyxFQUFFLENBQ1I7UUFFRCxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUNoQjtZQUNDLGFBQWE7WUFDYixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQy9CO2dCQUNDLGFBQWE7Z0JBQ2IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNUO1lBRUQsYUFBYTtZQUNiLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDaEIsUUFBUSxDQUFDLEVBQUUsQ0FBQztpQkFDWixRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztpQkFDaEIsV0FBVyxFQUFFLENBQ2Q7U0FDRDtRQUVELElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQ2hCO1lBQ0MsYUFBYTtZQUNiLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDL0I7Z0JBQ0MsYUFBYTtnQkFDYixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ1Q7U0FDRDtRQUVELE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNwQixDQUFDO0NBQ0QsQ0FBQyxDQUFDO0FBRVUsUUFBQSxJQUFJLEdBQUcsU0FBUyxDQUFDLElBQTZCLENBQUM7QUFDL0MsUUFBQSxRQUFRLEdBQUcsU0FBUyxDQUFDLFFBQXFDLENBQUM7QUFFM0QsUUFBQSxVQUFVLEdBQUcsU0FBUyxDQUFDLFVBQXlDLENBQUM7QUFDakUsUUFBQSxjQUFjLEdBQUcsU0FBUyxDQUFDLGNBQWlELENBQUM7QUFFN0UsUUFBQSxTQUFTLEdBQUcsU0FBUyxDQUFDLFNBQXVDLENBQUM7QUFDOUQsUUFBQSxhQUFhLEdBQUcsU0FBUyxDQUFDLGFBQStDLENBQUM7QUFFMUUsUUFBQSxTQUFTLEdBQUcsU0FBUyxDQUFDLFNBQXVDLENBQUM7QUFFOUQsUUFBQSxNQUFNLEdBQUcsU0FBUyxDQUFDO0FBRWhDLGtCQUFlLFNBQVMsQ0FBQyxJQUE2QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IHVzZXIgb24gMjAxOC8zLzE0LzAxNC5cbiAqL1xuXG5pbXBvcnQgeyB3cmFwU3RyZWFtVG9Qcm9taXNlLCBJU3RyZWFtTGluZVdpdGhWYWx1ZSB9IGZyb20gJy4uLy4uL2ZzL2xpbmUnO1xuaW1wb3J0IFByb21pc2UgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xuaW1wb3J0IGNyZWF0ZUxvYWRTdHJlYW0sIHsgSUNhbGxiYWNrIH0gZnJvbSAnLi4vLi4vZnMvc3RyZWFtJztcbmltcG9ydCBjcmVhdGVMb2FkU3RyZWFtU3luYyBmcm9tICcuLi8uLi9mcy9zeW5jJztcbmltcG9ydCBMb2FkZXJDbGFzcyBmcm9tICcuLi9fY2xhc3MnO1xuXG5leHBvcnQgdHlwZSBJRGljdFJvdzxUID0gc3RyaW5nPiA9IHtcblx0MDogc3RyaW5nLFxuXHQxOiBudW1iZXIsXG5cdDI6IG51bWJlcixcblx0W2luZGV4OiBudW1iZXJdOiBUIHwgc3RyaW5nIHwgbnVtYmVyLFxuXHQvL2xlbmd0aDogbnVtYmVyLFxufSAmIEFycmF5PHN0cmluZyB8IG51bWJlcj47XG5cbmV4cG9ydCB0eXBlIElEaWN0ID0gSURpY3RSb3dbXTtcblxuY29uc3QgbGliTG9hZGVyID0gbmV3IExvYWRlckNsYXNzPElEaWN0LCBJRGljdFJvdz4oe1xuXHRwYXJzZUxpbmUoaW5wdXQ6IHN0cmluZyk6IElEaWN0Um93XG5cdHtcblx0XHRsZXQgW3N0ciwgbiwgcywgLi4ucGx1c10gPSBpbnB1dFxuXHRcdFx0LnJlcGxhY2UoL15cXHMrfFxccyskLywgJycpXG5cdFx0XHQuc3BsaXQoL1xcfC9nKVxuXHRcdFx0Lm1hcCh2ID0+IHYudHJpbSgpKVxuXHRcdDtcblxuXHRcdGxldCBkMSA9IE51bWJlcihuKTtcblx0XHRsZXQgZDIgPSBOdW1iZXIocyk7XG5cblx0XHRpZiAoTnVtYmVyLmlzTmFOKGQxKSlcblx0XHR7XG5cdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRkMSA9IDA7XG5cdFx0fVxuXHRcdGlmIChOdW1iZXIuaXNOYU4oZDIpKVxuXHRcdHtcblx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdGQyID0gMDtcblx0XHR9XG5cblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0cmV0dXJuIFtzdHIsIGQxLCBkMiwgLi4ucGx1c107XG5cdH0sXG5cblx0ZmlsdGVyKGxpbmU6IHN0cmluZylcblx0e1xuXHRcdGxpbmUgPSBsaW5lXG5cdFx0XHQucmVwbGFjZSgvXFx1RkVGRi9nLCAnJylcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXFxzK3xcXHMrJC8sICcnKVxuXHRcdDtcblxuXHRcdGlmIChsaW5lICYmIGxpbmUuaW5kZXhPZignXFwvXFwvJykgIT0gMClcblx0XHR7XG5cdFx0XHRyZXR1cm4gbGluZTtcblx0XHR9XG5cdH0sXG5cblx0c3RyaW5naWZ5TGluZShkYXRhKVxuXHR7XG5cdFx0bGV0IGE6IHN0cmluZ1tdID0gW107XG5cblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0YSA9IGRhdGFcblx0XHRcdC5zbGljZSgpXG5cdFx0O1xuXG5cdFx0aWYgKGEubGVuZ3RoID4gMSlcblx0XHR7XG5cdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRpZiAoIWFbMV0gfHwgTnVtYmVyLmlzTmFOKGFbMV0pKVxuXHRcdFx0e1xuXHRcdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRcdGFbMV0gPSAwO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRhWzFdID0gJzB4JyArIGFbMV1cblx0XHRcdFx0LnRvU3RyaW5nKDE2KVxuXHRcdFx0XHQucGFkU3RhcnQoNCwgJzAnKVxuXHRcdFx0XHQudG9VcHBlckNhc2UoKVxuXHRcdFx0O1xuXHRcdH1cblxuXHRcdGlmIChhLmxlbmd0aCA+IDIpXG5cdFx0e1xuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0aWYgKCFhWzJdIHx8IE51bWJlci5pc05hTihhWzJdKSlcblx0XHRcdHtcblx0XHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0XHRhWzJdID0gMDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gYS5qb2luKCd8Jyk7XG5cdH1cbn0pO1xuXG5leHBvcnQgY29uc3QgbG9hZCA9IGxpYkxvYWRlci5sb2FkIGFzIHR5cGVvZiBsaWJMb2FkZXIubG9hZDtcbmV4cG9ydCBjb25zdCBsb2FkU3luYyA9IGxpYkxvYWRlci5sb2FkU3luYyBhcyB0eXBlb2YgbGliTG9hZGVyLmxvYWRTeW5jO1xuXG5leHBvcnQgY29uc3QgbG9hZFN0cmVhbSA9IGxpYkxvYWRlci5sb2FkU3RyZWFtIGFzIHR5cGVvZiBsaWJMb2FkZXIubG9hZFN0cmVhbTtcbmV4cG9ydCBjb25zdCBsb2FkU3RyZWFtU3luYyA9IGxpYkxvYWRlci5sb2FkU3RyZWFtU3luYyBhcyB0eXBlb2YgbGliTG9hZGVyLmxvYWRTdHJlYW1TeW5jO1xuXG5leHBvcnQgY29uc3QgcGFyc2VMaW5lID0gbGliTG9hZGVyLnBhcnNlTGluZSBhcyB0eXBlb2YgbGliTG9hZGVyLnBhcnNlTGluZTtcbmV4cG9ydCBjb25zdCBzdHJpbmdpZnlMaW5lID0gbGliTG9hZGVyLnN0cmluZ2lmeUxpbmUgYXMgdHlwZW9mIGxpYkxvYWRlci5zdHJpbmdpZnlMaW5lO1xuXG5leHBvcnQgY29uc3Qgc2VyaWFsaXplID0gbGliTG9hZGVyLnNlcmlhbGl6ZSBhcyB0eXBlb2YgbGliTG9hZGVyLnNlcmlhbGl6ZTtcblxuZXhwb3J0IGNvbnN0IExvYWRlciA9IGxpYkxvYWRlcjtcblxuZXhwb3J0IGRlZmF1bHQgbGliTG9hZGVyLmxvYWQgYXMgdHlwZW9mIGxpYkxvYWRlci5sb2FkO1xuIl19