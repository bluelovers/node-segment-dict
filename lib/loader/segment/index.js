"use strict";
/**
 * Created by user on 2018/3/14/014.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const _class_1 = require("../_class");
const libLoader = new _class_1.default({
    parseLine(input) {
        let [str, n, s, ...plus] = input
            .replace(/^\s+|\s+$/, '')
            .split(/\|/g)
            .map(v => v.trim());
        let d1 = Number(n);
        let d2 = Number(s);
        if (Number.isNaN(d1)) {
            // @ts-ignore
            d1 = 0;
        }
        if (Number.isNaN(d2)) {
            // @ts-ignore
            d2 = 0;
        }
        // @ts-ignore
        return [str, d1, d2, ...plus];
    },
    filter(line) {
        line = line
            .replace(/\uFEFF/g, '')
            .trim()
            .replace(/^\s+|\s+$/, '');
        if (line && line.indexOf('\/\/') != 0) {
            return line;
        }
    },
    stringifyLine(data) {
        let a = [];
        // @ts-ignore
        a = data
            .slice();
        if (a.length > 1) {
            // @ts-ignore
            if (!a[1] || Number.isNaN(a[1])) {
                // @ts-ignore
                a[1] = 0;
            }
            // @ts-ignore
            a[1] = '0x' + a[1]
                .toString(16)
                .padStart(4, '0')
                .toUpperCase();
        }
        if (a.length > 2) {
            // @ts-ignore
            if (!a[2] || Number.isNaN(a[2])) {
                // @ts-ignore
                a[2] = 0;
            }
        }
        return a.join('|');
    }
});
exports.load = libLoader.load;
exports.loadSync = libLoader.loadSync;
exports.loadStream = libLoader.loadStream;
exports.loadStreamSync = libLoader.loadStreamSync;
exports.parseLine = libLoader.parseLine;
exports.stringifyLine = libLoader.stringifyLine;
exports.serialize = libLoader.serialize;
exports.Loader = libLoader;
exports.default = libLoader.load;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBTUgsc0NBQW9DO0FBWXBDLE1BQU0sU0FBUyxHQUFHLElBQUksZ0JBQVcsQ0FBa0I7SUFDbEQsU0FBUyxDQUFDLEtBQWE7UUFFdEIsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsS0FBSzthQUM5QixPQUFPLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQzthQUN4QixLQUFLLENBQUMsS0FBSyxDQUFDO2FBQ1osR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQ25CO1FBRUQsSUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25CLElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVuQixJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQ3BCO1lBQ0MsYUFBYTtZQUNiLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDUDtRQUNELElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFDcEI7WUFDQyxhQUFhO1lBQ2IsRUFBRSxHQUFHLENBQUMsQ0FBQztTQUNQO1FBRUQsYUFBYTtRQUNiLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBWTtRQUVsQixJQUFJLEdBQUcsSUFBSTthQUNULE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDO2FBQ3RCLElBQUksRUFBRTthQUNOLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQ3pCO1FBRUQsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQ3JDO1lBQ0MsT0FBTyxJQUFJLENBQUM7U0FDWjtJQUNGLENBQUM7SUFFRCxhQUFhLENBQUMsSUFBSTtRQUVqQixJQUFJLENBQUMsR0FBYSxFQUFFLENBQUM7UUFFckIsYUFBYTtRQUNiLENBQUMsR0FBRyxJQUFJO2FBQ04sS0FBSyxFQUFFLENBQ1I7UUFFRCxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUNoQjtZQUNDLGFBQWE7WUFDYixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQy9CO2dCQUNDLGFBQWE7Z0JBQ2IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNUO1lBRUQsYUFBYTtZQUNiLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDaEIsUUFBUSxDQUFDLEVBQUUsQ0FBQztpQkFDWixRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztpQkFDaEIsV0FBVyxFQUFFLENBQ2Q7U0FDRDtRQUVELElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQ2hCO1lBQ0MsYUFBYTtZQUNiLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDL0I7Z0JBQ0MsYUFBYTtnQkFDYixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ1Q7U0FDRDtRQUVELE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNwQixDQUFDO0NBQ0QsQ0FBQyxDQUFDO0FBRVUsUUFBQSxJQUFJLEdBQUcsU0FBUyxDQUFDLElBQTZCLENBQUM7QUFDL0MsUUFBQSxRQUFRLEdBQUcsU0FBUyxDQUFDLFFBQXFDLENBQUM7QUFFM0QsUUFBQSxVQUFVLEdBQUcsU0FBUyxDQUFDLFVBQXlDLENBQUM7QUFDakUsUUFBQSxjQUFjLEdBQUcsU0FBUyxDQUFDLGNBQWlELENBQUM7QUFFN0UsUUFBQSxTQUFTLEdBQUcsU0FBUyxDQUFDLFNBQXVDLENBQUM7QUFDOUQsUUFBQSxhQUFhLEdBQUcsU0FBUyxDQUFDLGFBQStDLENBQUM7QUFFMUUsUUFBQSxTQUFTLEdBQUcsU0FBUyxDQUFDLFNBQXVDLENBQUM7QUFFOUQsUUFBQSxNQUFNLEdBQUcsU0FBUyxDQUFDO0FBRWhDLGtCQUFlLFNBQVMsQ0FBQyxJQUE2QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IHVzZXIgb24gMjAxOC8zLzE0LzAxNC5cbiAqL1xuXG5pbXBvcnQgeyB3cmFwU3RyZWFtVG9Qcm9taXNlLCBJU3RyZWFtTGluZVdpdGhWYWx1ZSB9IGZyb20gJy4uLy4uL2ZzL2xpbmUnO1xuaW1wb3J0ICogYXMgUHJvbWlzZSBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgY3JlYXRlTG9hZFN0cmVhbSwgeyBJQ2FsbGJhY2sgfSBmcm9tICcuLi8uLi9mcy9zdHJlYW0nO1xuaW1wb3J0IGNyZWF0ZUxvYWRTdHJlYW1TeW5jIGZyb20gJy4uLy4uL2ZzL3N5bmMnO1xuaW1wb3J0IExvYWRlckNsYXNzIGZyb20gJy4uL19jbGFzcyc7XG5cbmV4cG9ydCB0eXBlIElEaWN0Um93PFQgPSBzdHJpbmc+ID0ge1xuXHQwOiBzdHJpbmcsXG5cdDE6IG51bWJlcixcblx0MjogbnVtYmVyLFxuXHRbaW5kZXg6IG51bWJlcl06IFQgfCBzdHJpbmcgfCBudW1iZXIsXG5cdC8vbGVuZ3RoOiBudW1iZXIsXG59ICYgQXJyYXk8c3RyaW5nIHwgbnVtYmVyPjtcblxuZXhwb3J0IHR5cGUgSURpY3QgPSBJRGljdFJvd1tdO1xuXG5jb25zdCBsaWJMb2FkZXIgPSBuZXcgTG9hZGVyQ2xhc3M8SURpY3QsIElEaWN0Um93Pih7XG5cdHBhcnNlTGluZShpbnB1dDogc3RyaW5nKTogSURpY3RSb3dcblx0e1xuXHRcdGxldCBbc3RyLCBuLCBzLCAuLi5wbHVzXSA9IGlucHV0XG5cdFx0XHQucmVwbGFjZSgvXlxccyt8XFxzKyQvLCAnJylcblx0XHRcdC5zcGxpdCgvXFx8L2cpXG5cdFx0XHQubWFwKHYgPT4gdi50cmltKCkpXG5cdFx0O1xuXG5cdFx0bGV0IGQxID0gTnVtYmVyKG4pO1xuXHRcdGxldCBkMiA9IE51bWJlcihzKTtcblxuXHRcdGlmIChOdW1iZXIuaXNOYU4oZDEpKVxuXHRcdHtcblx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdGQxID0gMDtcblx0XHR9XG5cdFx0aWYgKE51bWJlci5pc05hTihkMikpXG5cdFx0e1xuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0ZDIgPSAwO1xuXHRcdH1cblxuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRyZXR1cm4gW3N0ciwgZDEsIGQyLCAuLi5wbHVzXTtcblx0fSxcblxuXHRmaWx0ZXIobGluZTogc3RyaW5nKVxuXHR7XG5cdFx0bGluZSA9IGxpbmVcblx0XHRcdC5yZXBsYWNlKC9cXHVGRUZGL2csICcnKVxuXHRcdFx0LnRyaW0oKVxuXHRcdFx0LnJlcGxhY2UoL15cXHMrfFxccyskLywgJycpXG5cdFx0O1xuXG5cdFx0aWYgKGxpbmUgJiYgbGluZS5pbmRleE9mKCdcXC9cXC8nKSAhPSAwKVxuXHRcdHtcblx0XHRcdHJldHVybiBsaW5lO1xuXHRcdH1cblx0fSxcblxuXHRzdHJpbmdpZnlMaW5lKGRhdGEpXG5cdHtcblx0XHRsZXQgYTogc3RyaW5nW10gPSBbXTtcblxuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRhID0gZGF0YVxuXHRcdFx0LnNsaWNlKClcblx0XHQ7XG5cblx0XHRpZiAoYS5sZW5ndGggPiAxKVxuXHRcdHtcblx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdGlmICghYVsxXSB8fCBOdW1iZXIuaXNOYU4oYVsxXSkpXG5cdFx0XHR7XG5cdFx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdFx0YVsxXSA9IDA7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdGFbMV0gPSAnMHgnICsgYVsxXVxuXHRcdFx0XHQudG9TdHJpbmcoMTYpXG5cdFx0XHRcdC5wYWRTdGFydCg0LCAnMCcpXG5cdFx0XHRcdC50b1VwcGVyQ2FzZSgpXG5cdFx0XHQ7XG5cdFx0fVxuXG5cdFx0aWYgKGEubGVuZ3RoID4gMilcblx0XHR7XG5cdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRpZiAoIWFbMl0gfHwgTnVtYmVyLmlzTmFOKGFbMl0pKVxuXHRcdFx0e1xuXHRcdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRcdGFbMl0gPSAwO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBhLmpvaW4oJ3wnKTtcblx0fVxufSk7XG5cbmV4cG9ydCBjb25zdCBsb2FkID0gbGliTG9hZGVyLmxvYWQgYXMgdHlwZW9mIGxpYkxvYWRlci5sb2FkO1xuZXhwb3J0IGNvbnN0IGxvYWRTeW5jID0gbGliTG9hZGVyLmxvYWRTeW5jIGFzIHR5cGVvZiBsaWJMb2FkZXIubG9hZFN5bmM7XG5cbmV4cG9ydCBjb25zdCBsb2FkU3RyZWFtID0gbGliTG9hZGVyLmxvYWRTdHJlYW0gYXMgdHlwZW9mIGxpYkxvYWRlci5sb2FkU3RyZWFtO1xuZXhwb3J0IGNvbnN0IGxvYWRTdHJlYW1TeW5jID0gbGliTG9hZGVyLmxvYWRTdHJlYW1TeW5jIGFzIHR5cGVvZiBsaWJMb2FkZXIubG9hZFN0cmVhbVN5bmM7XG5cbmV4cG9ydCBjb25zdCBwYXJzZUxpbmUgPSBsaWJMb2FkZXIucGFyc2VMaW5lIGFzIHR5cGVvZiBsaWJMb2FkZXIucGFyc2VMaW5lO1xuZXhwb3J0IGNvbnN0IHN0cmluZ2lmeUxpbmUgPSBsaWJMb2FkZXIuc3RyaW5naWZ5TGluZSBhcyB0eXBlb2YgbGliTG9hZGVyLnN0cmluZ2lmeUxpbmU7XG5cbmV4cG9ydCBjb25zdCBzZXJpYWxpemUgPSBsaWJMb2FkZXIuc2VyaWFsaXplIGFzIHR5cGVvZiBsaWJMb2FkZXIuc2VyaWFsaXplO1xuXG5leHBvcnQgY29uc3QgTG9hZGVyID0gbGliTG9hZGVyO1xuXG5leHBvcnQgZGVmYXVsdCBsaWJMb2FkZXIubG9hZCBhcyB0eXBlb2YgbGliTG9hZGVyLmxvYWQ7XG4iXX0=